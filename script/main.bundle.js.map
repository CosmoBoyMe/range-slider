{"version":3,"file":"script/main.bundle.js","mappings":"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","sources":["webpack:///./Presenter/Presenter.ts","webpack:///./helpers.ts","webpack:///./Observer/Observer.ts","webpack:///./const.ts","webpack:///./Model/Model.ts","webpack:///./View/subView/Track.ts","webpack:///./View/subView/Progress.ts","webpack:///./View/subView/Scale.ts","webpack:///./View/subView/Tooltip.ts","webpack:///./View/subView/Thumb.ts","webpack:///./View/View.ts","webpack:///./Slider.ts","webpack:///./plugin.ts","webpack:///./demo/Panel/Panel.ts","webpack:///./demo/index.ts"],"sourcesContent":["class Presenter {\r\n    constructor(modelInstance, viewInstance) {\r\n        this.modelInstance = modelInstance;\r\n        this.viewInstance = viewInstance;\r\n        this.bind();\r\n    }\r\n    getModelInstance() {\r\n        return this.modelInstance;\r\n    }\r\n    getViewInstance() {\r\n        return this.viewInstance;\r\n    }\r\n    bind() {\r\n        this.modelInstance.subscribe(\"OPTIONS_CHANGED\" /* OPTIONS_CHANGED */, (data) => {\r\n            this.viewInstance.updateOptions(data);\r\n        });\r\n        this.viewInstance.subscribe(\"UPDATE_VALUE\" /* UPDATE_VALUE */, (payload) => {\r\n            this.modelInstance.updateValue(payload);\r\n        });\r\n        this.modelInstance.subscribe(\"VALUE_UPDATED\" /* VALUE_UPDATED */, (payload) => {\r\n            this.viewInstance.updateValue(payload);\r\n        });\r\n    }\r\n}\r\nexport { Presenter };\r\n","const getClosestValue = (min, max, value, step) => {\r\n    if (value <= min) {\r\n        return min;\r\n    }\r\n    if (value >= max) {\r\n        return max;\r\n    }\r\n    const range = Math.abs(min - value);\r\n    const delta = Math.round(range / step);\r\n    const newValue = min + step * delta;\r\n    return Math.round(newValue * 100) / 100;\r\n};\r\nconst getCurrentValueToStep = (min, max, value, prevValue, step) => {\r\n    if (value <= min) {\r\n        return min;\r\n    }\r\n    if (value >= max) {\r\n        return max;\r\n    }\r\n    const range = Math.abs(min - value);\r\n    const delta = prevValue < value ? Math.floor(range / step) : Math.ceil(range / step);\r\n    const newValue = min + step * delta;\r\n    return Math.round(newValue * 100) / 100;\r\n};\r\nconst findNearestIndexToValue = (arr, value) => {\r\n    if (arr.length === 0) {\r\n        return -1;\r\n    }\r\n    const nearestValue = arr.reduce((prev, curr) => Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev);\r\n    const allIndexOfNearestValue = arr.reduce((prev, curr, index) => {\r\n        if (curr === nearestValue) {\r\n            prev.push(index);\r\n            return prev;\r\n        }\r\n        return prev;\r\n    }, []);\r\n    if (allIndexOfNearestValue.length === 1) {\r\n        return allIndexOfNearestValue[0];\r\n    }\r\n    if (value > nearestValue) {\r\n        return allIndexOfNearestValue.length - 1;\r\n    }\r\n    return 0;\r\n};\r\nconst getPercentOfValue = (value, min, max) => {\r\n    const percent = ((value - min) / (max - min)) * 100;\r\n    return percent;\r\n};\r\nconst getClosestNumberToStep = (value, step) => {\r\n    const newStep = Math.abs(step);\r\n    const absValue = Math.abs(value);\r\n    const low = absValue - (absValue % newStep);\r\n    const high = low + newStep;\r\n    const result = absValue - low < high - absValue ? low : high;\r\n    return result * Math.sign(value);\r\n};\r\nexport { getClosestValue, findNearestIndexToValue, getPercentOfValue, getClosestNumberToStep, getCurrentValueToStep, };\r\n","class Observer {\r\n    constructor() {\r\n        this.observers = {};\r\n    }\r\n    getObservers() {\r\n        return this.observers;\r\n    }\r\n    subscribe(type, observer) {\r\n        if (!this.observers[type]) {\r\n            this.observers[type] = [observer];\r\n        }\r\n        else {\r\n            this.observers[type].push(observer);\r\n        }\r\n    }\r\n    notify(type, data) {\r\n        if (this.observers[type]) {\r\n            this.observers[type].forEach((observer) => observer(data));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport { Observer };\r\n","const DEFAULT_OPTIONS = {\r\n    min: 0,\r\n    max: 10,\r\n    step: 1,\r\n    scaleCounts: 11,\r\n    values: [5, 6],\r\n    vertical: true,\r\n    scale: true,\r\n    tooltip: true,\r\n    progress: true,\r\n};\r\nexport { DEFAULT_OPTIONS };\r\n","import { getClosestValue } from '../helpers';\r\nimport { Observer } from '../Observer/Observer';\r\nimport { DEFAULT_OPTIONS } from '../const';\r\nclass Model extends Observer {\r\n    constructor(options) {\r\n        super();\r\n        this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\r\n        this.init();\r\n    }\r\n    getOptions() {\r\n        const { options } = this;\r\n        return JSON.parse(JSON.stringify(options));\r\n    }\r\n    updateValue({ value, index }) {\r\n        const { values } = this.options;\r\n        const newValues = [...values];\r\n        newValues[index] = value;\r\n        this.setNewOptions({ values: newValues });\r\n        this.notify(\"VALUE_UPDATED\" /* VALUE_UPDATED */, { value, index });\r\n    }\r\n    setNewOptions(newOptions) {\r\n        const oldOptions = JSON.parse(JSON.stringify(this.options));\r\n        this.options = Object.assign(Object.assign({}, oldOptions), newOptions);\r\n    }\r\n    updateOptions(newOptions) {\r\n        this.setNewOptions(newOptions);\r\n        this.normalizeOptions();\r\n        this.notify(\"OPTIONS_CHANGED\" /* OPTIONS_CHANGED */, this.options);\r\n    }\r\n    init() {\r\n        this.normalizeOptions();\r\n    }\r\n    normalizeOptions() {\r\n        const max = this.normalizeMax();\r\n        const step = this.normalizeStep();\r\n        const scaleCounts = this.normalizeScaleCounts();\r\n        const values = this.normalizeValues();\r\n        const normalizedOptions = {\r\n            max,\r\n            scaleCounts,\r\n            step,\r\n            values,\r\n        };\r\n        this.setNewOptions(normalizedOptions);\r\n    }\r\n    normalizeScaleCounts() {\r\n        const { min, max, step, scaleCounts } = this.options;\r\n        if (scaleCounts <= 0) {\r\n            return 1;\r\n        }\r\n        const range = Math.abs(max - min);\r\n        const maxScaleCounts = range / step + 1;\r\n        const normalizedScaleCounts = Math.round(maxScaleCounts < scaleCounts ? maxScaleCounts : scaleCounts);\r\n        return normalizedScaleCounts;\r\n    }\r\n    normalizeMax() {\r\n        const { min, max, step } = this.options;\r\n        if (min > max) {\r\n            return min + step;\r\n        }\r\n        if (min === max) {\r\n            return min + step;\r\n        }\r\n        return max;\r\n    }\r\n    normalizeValues() {\r\n        const { min, max, step, values } = this.options;\r\n        const normalizedValues = values.map((value) => getClosestValue(min, max, value, step));\r\n        const sortedValues = normalizedValues.sort((a, b) => a - b);\r\n        return sortedValues;\r\n    }\r\n    normalizeStep() {\r\n        const { step, min, max } = this.options;\r\n        const range = Math.abs(max - min);\r\n        if (step <= 0) {\r\n            return 1;\r\n        }\r\n        if (step > range) {\r\n            return range;\r\n        }\r\n        return step;\r\n    }\r\n}\r\nexport { Model };\r\n","class Track {\r\n    constructor({ element, isVertical, handleTrackClick }) {\r\n        this.trackElement = document.createElement('div');\r\n        this.element = element;\r\n        this.handleTrackClick = handleTrackClick;\r\n        this.isVertical = isVertical;\r\n        this.render();\r\n    }\r\n    getElement() {\r\n        return this.trackElement;\r\n    }\r\n    toggleVerticalClass() {\r\n        this.trackElement.classList.toggle(\"js-track--vertical\" /* TRACK_VERTICAL */);\r\n    }\r\n    destroy() {\r\n        this.trackElement.remove();\r\n    }\r\n    render() {\r\n        const { trackElement, element } = this;\r\n        trackElement.classList.add(\"js-track\" /* TRACK */);\r\n        trackElement.addEventListener('pointerdown', this.handleTrackClick);\r\n        if (this.isVertical) {\r\n            this.toggleVerticalClass();\r\n        }\r\n        element.append(trackElement);\r\n    }\r\n}\r\nexport { Track };\r\n","import { getPercentOfValue } from '../../helpers';\r\nclass Progress {\r\n    constructor({ rootElement, values, min, max, range, vertical, }) {\r\n        this.progressEl = document.createElement('div');\r\n        this.rootElement = rootElement;\r\n        this.values = values;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.range = range;\r\n        this.vertical = vertical;\r\n        this.init();\r\n    }\r\n    updateValues(newValues) {\r\n        this.values = newValues;\r\n        this.updateProgressLength();\r\n        this.updatePosition();\r\n    }\r\n    destroy() {\r\n        this.progressEl.remove();\r\n    }\r\n    getElement() {\r\n        return this.progressEl;\r\n    }\r\n    updateProgressLength() {\r\n        const { progressEl, values, min, max, range, vertical } = this;\r\n        let progressLengthInPercent;\r\n        if (range) {\r\n            const minValue = Math.min(...values);\r\n            const maxValue = Math.max(...values);\r\n            const minValueInPercent = getPercentOfValue(minValue, min, max);\r\n            const maxValueInPercent = getPercentOfValue(maxValue, min, max);\r\n            progressLengthInPercent = maxValueInPercent - minValueInPercent;\r\n        }\r\n        else {\r\n            progressLengthInPercent = getPercentOfValue(values[0], min, max);\r\n        }\r\n        vertical\r\n            ? (progressEl.style.height = `${progressLengthInPercent}%`)\r\n            : (progressEl.style.width = `${progressLengthInPercent}%`);\r\n    }\r\n    toggleVerticalClass() {\r\n        const { progressEl, vertical } = this;\r\n        if (vertical) {\r\n            progressEl.classList.add(\"js-progress--vertical\" /* PROGRESS_VERTICAL */);\r\n        }\r\n        else {\r\n            progressEl.classList.remove(\"js-progress--vertical\" /* PROGRESS_VERTICAL */);\r\n        }\r\n    }\r\n    updatePosition() {\r\n        const { min, max, values, progressEl, range, vertical } = this;\r\n        if (range) {\r\n            const minValue = Math.min(...values);\r\n            const positionInPercent = getPercentOfValue(minValue, min, max);\r\n            vertical\r\n                ? (progressEl.style.bottom = `${positionInPercent}%`)\r\n                : (progressEl.style.left = `${positionInPercent}%`);\r\n        }\r\n        else {\r\n            vertical\r\n                ? (progressEl.style.bottom = '0%')\r\n                : (progressEl.style.left = '0%');\r\n        }\r\n    }\r\n    init() {\r\n        const { progressEl } = this;\r\n        progressEl.classList.add(\"js-progress\" /* PROGRESS */);\r\n        this.updateProgressLength();\r\n        this.updatePosition();\r\n        this.rootElement.append(progressEl);\r\n        this.toggleVerticalClass();\r\n    }\r\n}\r\nexport { Progress };\r\n","import { getPercentOfValue, getClosestValue } from '../../helpers';\r\nclass Scale {\r\n    constructor({ rootDom, min, max, step, scaleCounts, vertical, handleScaleClick, }) {\r\n        this.scaleEl = document.createElement('div');\r\n        this.rootDom = rootDom;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n        this.vertical = vertical;\r\n        this.scaleCounts = scaleCounts;\r\n        this.handleScaleClick = handleScaleClick;\r\n        this.render();\r\n    }\r\n    destroy() {\r\n        this.scaleEl.remove();\r\n    }\r\n    getElement() {\r\n        return this.scaleEl;\r\n    }\r\n    createScalePoint(pointValue) {\r\n        const { min, max, vertical } = this;\r\n        const pointEl = document.createElement('div');\r\n        pointEl.classList.add(\"js-scale__point\" /* SCALE_POINT */);\r\n        pointEl.innerHTML = String(pointValue);\r\n        const valuePercent = getPercentOfValue(pointValue, min, max);\r\n        if (vertical) {\r\n            pointEl.classList.add(\"js-scale__point--vertical\" /* SCALE_POINT_VERTICAL */);\r\n            pointEl.style.bottom = `${valuePercent}%`;\r\n        }\r\n        else {\r\n            pointEl.style.left = `${valuePercent}%`;\r\n        }\r\n        return pointEl;\r\n    }\r\n    getScaleValues() {\r\n        const { min, max, scaleCounts, step } = this;\r\n        const values = [];\r\n        const partsCountWithoutStart = scaleCounts - 1;\r\n        const partStep = (max - min) / partsCountWithoutStart;\r\n        for (let i = 0; i <= partsCountWithoutStart; i += 1) {\r\n            let value;\r\n            if (i === partsCountWithoutStart) {\r\n                value = max;\r\n            }\r\n            else {\r\n                value = getClosestValue(min, max, min + partStep * i, step);\r\n            }\r\n            values.push(value);\r\n        }\r\n        return values;\r\n    }\r\n    deleteScalePointsWhenPointOverlap() {\r\n        const { scaleEl } = this;\r\n        const allPoints = [...scaleEl.children];\r\n        allPoints.forEach((item, index) => {\r\n            const currentItemRect = item.getBoundingClientRect();\r\n            for (let i = index + 1; i < allPoints.length; i += 1) {\r\n                const nextItem = allPoints[i];\r\n                const nextItemRect = nextItem.getBoundingClientRect();\r\n                const isOverlap = !(currentItemRect.top > nextItemRect.bottom ||\r\n                    currentItemRect.right < nextItemRect.left ||\r\n                    currentItemRect.bottom < nextItemRect.top ||\r\n                    currentItemRect.left > nextItemRect.right);\r\n                if (isOverlap) {\r\n                    if (scaleEl.contains(nextItem)) {\r\n                        scaleEl.removeChild(nextItem);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const { rootDom, scaleEl, scaleCounts, vertical } = this;\r\n        scaleEl.classList.add(\"js-scale\" /* SCALE */);\r\n        if (vertical) {\r\n            scaleEl.classList.add(\"js-scale--vertical\" /* SCALE_VERTICAL */);\r\n        }\r\n        const scaleValues = this.getScaleValues();\r\n        const scalePoints = [];\r\n        for (let i = 0; i < scaleCounts; i += 1) {\r\n            const scalePoint = this.createScalePoint(scaleValues[i]);\r\n            scalePoints.push(scalePoint);\r\n        }\r\n        scaleEl.append(...scalePoints);\r\n        scaleEl.addEventListener('click', this.handleScaleClick);\r\n        rootDom.append(scaleEl);\r\n        this.deleteScalePointsWhenPointOverlap();\r\n    }\r\n}\r\nexport { Scale };\r\n","class Tooltip {\r\n    constructor({ rootElement, value, isVertical }) {\r\n        this.tooltipEl = document.createElement('div');\r\n        this.rootElement = rootElement;\r\n        this.value = value;\r\n        this.isVertical = isVertical;\r\n        this.render();\r\n    }\r\n    destroy() {\r\n        this.tooltipEl.remove();\r\n    }\r\n    getElement() {\r\n        return this.tooltipEl;\r\n    }\r\n    updateValue(newValue) {\r\n        this.value = newValue;\r\n        this.updateInnerText();\r\n    }\r\n    toggleVerticalClass() {\r\n        this.tooltipEl.classList.toggle(\"js-tooltip--vertical\" /* TOOLTIP_VERTICAL */);\r\n    }\r\n    updateInnerText() {\r\n        this.tooltipEl.textContent = String(this.value);\r\n    }\r\n    render() {\r\n        const { tooltipEl } = this;\r\n        tooltipEl.classList.add(\"js-tooltip\" /* TOOLTIP */);\r\n        tooltipEl.textContent = String(this.value);\r\n        if (this.isVertical) {\r\n            this.toggleVerticalClass();\r\n        }\r\n        this.rootElement.append(tooltipEl);\r\n    }\r\n}\r\nexport { Tooltip };\r\n","import { Tooltip } from './Tooltip';\r\nimport { getPercentOfValue } from '../../helpers';\r\nclass Thumb {\r\n    constructor({ rootElement, value, min, max, handleThumbPointerDown, index, isVertical, enableTooltip, }) {\r\n        this.thumbEl = document.createElement('div');\r\n        this.tooltipInstance = null;\r\n        this.rootElement = rootElement;\r\n        this.value = value;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.handleThumbPointerDown = handleThumbPointerDown;\r\n        this.index = index;\r\n        this.enableTooltip = enableTooltip;\r\n        this.isVertical = isVertical;\r\n        if (this.enableTooltip) {\r\n            this.tooltipInstance = new Tooltip({\r\n                rootElement: this.thumbEl,\r\n                value,\r\n                isVertical,\r\n            });\r\n        }\r\n        this.render();\r\n    }\r\n    getElement() {\r\n        return this.thumbEl;\r\n    }\r\n    destroy() {\r\n        this.thumbEl.remove();\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    updateValue(newValue) {\r\n        this.value = newValue;\r\n        if (this.tooltipInstance) {\r\n            this.tooltipInstance.updateValue(newValue);\r\n        }\r\n        this.updatePosition();\r\n    }\r\n    updatePosition(currentValue) {\r\n        const { value, min, max, isVertical, thumbEl } = this;\r\n        if (currentValue !== undefined) {\r\n            isVertical\r\n                ? (thumbEl.style.bottom = `${getPercentOfValue(currentValue, min, max)}%`)\r\n                : (thumbEl.style.left = `${getPercentOfValue(currentValue, min, max)}%`);\r\n            return;\r\n        }\r\n        isVertical\r\n            ? (thumbEl.style.bottom = `${getPercentOfValue(value, min, max)}%`)\r\n            : (thumbEl.style.left = `${getPercentOfValue(value, min, max)}%`);\r\n    }\r\n    addActiveClass() {\r\n        this.thumbEl.classList.add(\"js-thumb--active\" /* THUMB_ACTIVE */);\r\n    }\r\n    removeActiveClass() {\r\n        this.thumbEl.classList.remove(\"js-thumb--active\" /* THUMB_ACTIVE */);\r\n    }\r\n    toggleVerticalClass() {\r\n        this.thumbEl.classList.toggle(\"js-thumb--vertical\" /* THUMB_VERTICAL */);\r\n    }\r\n    render() {\r\n        const { rootElement, thumbEl, handleThumbPointerDown, index, isVertical, } = this;\r\n        thumbEl.classList.add(\"js-thumb\" /* THUMB */);\r\n        if (isVertical) {\r\n            this.toggleVerticalClass();\r\n        }\r\n        this.updatePosition();\r\n        thumbEl.addEventListener('pointerdown', (event) => handleThumbPointerDown(event, index));\r\n        rootElement.append(thumbEl);\r\n    }\r\n}\r\nexport { Thumb };\r\n","import { getClosestValue, findNearestIndexToValue, getCurrentValueToStep, } from '../helpers';\r\nimport { Observer } from '../Observer/Observer';\r\nimport { Scale, Track, Thumb, Progress } from './subView/index';\r\nclass View extends Observer {\r\n    constructor(domRoot, options) {\r\n        super();\r\n        this.sliderElement = document.createElement('div');\r\n        this.track = null;\r\n        this.thumbsInstance = [];\r\n        this.progressInstance = null;\r\n        this.scaleInstance = null;\r\n        this.thumbWithMaxValueIndex = -1;\r\n        this.lastClickedThumbIndex = null;\r\n        this.sliderElement.classList.add(\"js-custom-slider\" /* SLIDER */);\r\n        domRoot.append(this.sliderElement);\r\n        this.options = JSON.parse(JSON.stringify(options));\r\n        this.render();\r\n    }\r\n    getAllInstance() {\r\n        return {\r\n            track: this.track,\r\n            thumbs: this.thumbsInstance,\r\n            progress: this.progressInstance,\r\n            scale: this.scaleInstance,\r\n        };\r\n    }\r\n    updateValue({ value, index }) {\r\n        this.options.values[index] = value;\r\n        this.thumbsInstance[index].updateValue(value);\r\n        if (this.progressInstance) {\r\n            this.progressInstance.updateValues(this.options.values);\r\n        }\r\n        this.toggleActiveThumb(index);\r\n    }\r\n    updateOptions(newOptions) {\r\n        this.options = newOptions;\r\n        this.destroyAllInstances();\r\n        this.render();\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    getSliderElement() {\r\n        return this.sliderElement;\r\n    }\r\n    getCurrentValueFromCoords(clientX, clientY) {\r\n        const { min, max, vertical } = this.options;\r\n        const coords = vertical ? clientY : clientX;\r\n        const startEdgeCoords = vertical\r\n            ? this.sliderElement.getBoundingClientRect().bottom\r\n            : this.sliderElement.getBoundingClientRect().left;\r\n        const maxOffsetInPx = vertical\r\n            ? this.sliderElement.offsetHeight\r\n            : this.sliderElement.offsetWidth;\r\n        let offsetInPx = vertical\r\n            ? startEdgeCoords - coords\r\n            : coords - startEdgeCoords;\r\n        if (offsetInPx < 0) {\r\n            offsetInPx = 0;\r\n        }\r\n        if (offsetInPx > maxOffsetInPx) {\r\n            offsetInPx = maxOffsetInPx;\r\n        }\r\n        const valueInPercent = offsetInPx / (maxOffsetInPx / 100);\r\n        const currentValue = (valueInPercent * (max - min)) / 100 + min;\r\n        return currentValue;\r\n    }\r\n    destroyAllInstances() {\r\n        var _a, _b, _c, _d;\r\n        (_a = this.track) === null || _a === void 0 ? void 0 : _a.destroy();\r\n        (_b = this.progressInstance) === null || _b === void 0 ? void 0 : _b.destroy();\r\n        this.thumbsInstance.forEach((thumbInstance) => thumbInstance.destroy());\r\n        (_c = this.scaleInstance) === null || _c === void 0 ? void 0 : _c.destroy();\r\n        (_d = this.progressInstance) === null || _d === void 0 ? void 0 : _d.destroy();\r\n    }\r\n    handleThumbPointerDown(event, index) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        const validateValue = (value) => {\r\n            var _a, _b;\r\n            const { min, max, values } = this.options;\r\n            const prevThumbValue = (_a = values[index - 1]) !== null && _a !== void 0 ? _a : min;\r\n            const nextThumbValue = (_b = values[index + 1]) !== null && _b !== void 0 ? _b : max;\r\n            if (value < prevThumbValue) {\r\n                return prevThumbValue;\r\n            }\r\n            if (value > nextThumbValue) {\r\n                return nextThumbValue;\r\n            }\r\n            return value;\r\n        };\r\n        const handlerDocumentPointerMove = ({ clientX, clientY, }) => {\r\n            const currentValue = this.getCurrentValueFromCoords(clientX, clientY);\r\n            const validatedValue = validateValue(currentValue);\r\n            const currentThumb = this.thumbsInstance[index];\r\n            currentThumb.updatePosition(validatedValue);\r\n        };\r\n        const handlerDocumentPointerUp = ({ clientX, clientY, }) => {\r\n            const { min, max, step, values } = this.options;\r\n            const valueFromCoords = this.getCurrentValueFromCoords(clientX, clientY);\r\n            const prevValue = values[index];\r\n            const currentValue = getCurrentValueToStep(min, max, valueFromCoords, prevValue, step);\r\n            const validatedValue = validateValue(currentValue);\r\n            this.notify(\"UPDATE_VALUE\" /* UPDATE_VALUE */, { value: validatedValue, index });\r\n            document.removeEventListener('pointerup', handlerDocumentPointerUp);\r\n            document.removeEventListener('pointermove', handlerDocumentPointerMove);\r\n        };\r\n        document.addEventListener('pointermove', handlerDocumentPointerMove);\r\n        document.addEventListener('pointerup', handlerDocumentPointerUp);\r\n        const { target } = event;\r\n        if (target) {\r\n            target.ondragstart = () => false;\r\n        }\r\n    }\r\n    handleTrackClick(event) {\r\n        const { clientX, clientY } = event;\r\n        const { min, max, step } = this.options;\r\n        const currentValue = this.getCurrentValueFromCoords(clientX, clientY);\r\n        const closestValue = getClosestValue(min, max, currentValue, step);\r\n        this.updateClickedValue(closestValue);\r\n    }\r\n    handleScaleClick(event) {\r\n        const { target } = event;\r\n        const isTargetScalePoint = target.classList.contains(\"js-scale__point\" /* SCALE_POINT */);\r\n        if (isTargetScalePoint) {\r\n            const value = Number(target.textContent);\r\n            this.updateClickedValue(value);\r\n        }\r\n    }\r\n    updateClickedValue(value) {\r\n        const { values } = this.options;\r\n        let handleIndex = 0;\r\n        if (values.length > 1) {\r\n            handleIndex = findNearestIndexToValue(values, value);\r\n        }\r\n        this.notify(\"UPDATE_VALUE\" /* UPDATE_VALUE */, { value, index: handleIndex });\r\n    }\r\n    toggleActiveThumb(newClickedThumbIndex = null) {\r\n        const { values, max } = this.options;\r\n        const { thumbWithMaxValueIndex } = this;\r\n        const setActiveClassToThumbWithMaxValue = () => {\r\n            var _a, _b;\r\n            const index = values.findIndex((value) => value === max);\r\n            if (index === -1) {\r\n                (_a = this.thumbsInstance[thumbWithMaxValueIndex]) === null || _a === void 0 ? void 0 : _a.removeActiveClass();\r\n                this.thumbWithMaxValueIndex = index;\r\n            }\r\n            else {\r\n                (_b = this.thumbsInstance[thumbWithMaxValueIndex]) === null || _b === void 0 ? void 0 : _b.removeActiveClass();\r\n                this.thumbsInstance[index].addActiveClass();\r\n                this.thumbWithMaxValueIndex = index;\r\n            }\r\n        };\r\n        const setActiveClassToCurrentThumb = () => {\r\n            if (newClickedThumbIndex !== null) {\r\n                if (this.lastClickedThumbIndex !== null) {\r\n                    this.thumbsInstance[this.lastClickedThumbIndex].removeActiveClass();\r\n                }\r\n                this.thumbsInstance[newClickedThumbIndex].addActiveClass();\r\n                this.lastClickedThumbIndex = newClickedThumbIndex;\r\n            }\r\n        };\r\n        setActiveClassToThumbWithMaxValue();\r\n        setActiveClassToCurrentThumb();\r\n    }\r\n    render() {\r\n        const { min, max, step, values, scaleCounts, vertical, tooltip, scale, progress, } = this.options;\r\n        const isRange = values.length > 1;\r\n        this.track = new Track({\r\n            element: this.sliderElement,\r\n            isVertical: vertical,\r\n            handleTrackClick: this.handleTrackClick.bind(this),\r\n        });\r\n        const trackElement = this.track.getElement();\r\n        if (progress) {\r\n            this.progressInstance = new Progress({\r\n                rootElement: trackElement,\r\n                values,\r\n                min,\r\n                max,\r\n                range: isRange,\r\n                vertical,\r\n            });\r\n        }\r\n        if (scale) {\r\n            this.scaleInstance = new Scale({\r\n                rootDom: this.sliderElement,\r\n                min,\r\n                max,\r\n                step,\r\n                scaleCounts,\r\n                vertical,\r\n                handleScaleClick: this.handleScaleClick.bind(this),\r\n            });\r\n        }\r\n        this.thumbsInstance = values.map((value, index) => new Thumb({\r\n            rootElement: trackElement,\r\n            value,\r\n            min,\r\n            max,\r\n            handleThumbPointerDown: this.handleThumbPointerDown.bind(this),\r\n            index,\r\n            isVertical: vertical,\r\n            enableTooltip: tooltip,\r\n        }));\r\n        this.toggleActiveThumb();\r\n    }\r\n}\r\nexport { View };\r\n","import './style.scss';\r\nimport { Presenter } from './Presenter/Presenter';\r\nimport { Model } from './Model/Model';\r\nimport { View } from './View/View';\r\nclass Slider {\r\n    constructor(domRoot, options = {}) {\r\n        this.modelInstance = new Model(options);\r\n        const modelOptions = this.modelInstance.getOptions();\r\n        this.viewInstance = new View(domRoot, modelOptions);\r\n        this.presenterInstance = new Presenter(this.modelInstance, this.viewInstance);\r\n    }\r\n    updateOptions(newOptions) {\r\n        this.modelInstance.updateOptions(newOptions);\r\n    }\r\n    onChangeOptions(fn) {\r\n        const notifyFn = () => {\r\n            fn(this.getOptions());\r\n        };\r\n        this.modelInstance.subscribe(\"OPTIONS_CHANGED\" /* OPTIONS_CHANGED */, notifyFn);\r\n        this.modelInstance.subscribe(\"VALUE_UPDATED\" /* VALUE_UPDATED */, notifyFn);\r\n    }\r\n    getOptions() {\r\n        return this.modelInstance.getOptions();\r\n    }\r\n}\r\nexport { Slider };\r\n","import { Slider } from './Slider';\r\n(function plugin($) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    $.fn.rangeSlider = function slider(option = {}) {\r\n        const element = $(this).get(0);\r\n        if (element) {\r\n            return new Slider(element, option);\r\n        }\r\n        return undefined;\r\n    };\r\n})(jQuery);\r\n","import './style.scss';\r\nclass Panel {\r\n    constructor(panelEl, slider) {\r\n        this.panelEl = panelEl;\r\n        this.slider = slider;\r\n        this.options = slider.getOptions();\r\n        this.slider.onChangeOptions(this.onChangeOptions.bind(this));\r\n        this.findElements();\r\n        this.bindListeners();\r\n    }\r\n    findElements() {\r\n        const { panelEl } = this;\r\n        const minField = panelEl.querySelector(`.${\"js-panel__min-field\" /* MIN_FIELD */}`);\r\n        const minInput = minField.querySelector('input');\r\n        const maxField = panelEl.querySelector(`.${\"js-panel__max-field\" /* MAX_FIELD */}`);\r\n        const maxInput = maxField.querySelector('input');\r\n        const stepField = panelEl.querySelector(`.${\"js-panel__step-field\" /* STEP_FIELD */}`);\r\n        const stepInput = stepField.querySelector('input');\r\n        const scaleCountsField = panelEl.querySelector(`.${\"js-panel__scale-counts-field\" /* SCALE_COUNTS_FIELD */}`);\r\n        const scaleCountsInput = scaleCountsField.querySelector('input');\r\n        const thumbsValuesField = panelEl.querySelector(`.${\"js-panel__thumbs-values\" /* THUMB_VALUES */}`);\r\n        const thumbsValuesInputs = thumbsValuesField.querySelectorAll('input');\r\n        const verticalToggleField = panelEl.querySelector(`.${\"js-panel__toggle-vertical-field\" /* TOGGLE_VERTICAL_FIELD */}`);\r\n        const verticalToggleInput = verticalToggleField.querySelector('input');\r\n        const scaleToggleField = panelEl.querySelector(`.${\"js-panel__toggle-scale-field\" /* TOGGLE_SCALE_FIELD */}`);\r\n        const scaleToggleInput = scaleToggleField.querySelector('input');\r\n        const tooltipToggleField = panelEl.querySelector(`.${\"js-panel__toggle-tooltip-field\" /* TOGGLE_TOOLTIP_FIELD */}`);\r\n        const tooltipToggleInput = tooltipToggleField.querySelector('input');\r\n        const progressToggleField = panelEl.querySelector(`.${\"js-panel__toggle-progress-field\" /* TOGGLE_PROGRESS_FIELD */}`);\r\n        const progressToggleInput = progressToggleField.querySelector('input');\r\n        this.panelElements = {\r\n            minInput,\r\n            maxInput,\r\n            stepInput,\r\n            scaleCountsInput,\r\n            scaleToggleInput,\r\n            verticalToggleInput,\r\n            tooltipToggleInput,\r\n            progressToggleInput,\r\n            valuesInputs: thumbsValuesInputs,\r\n        };\r\n    }\r\n    handlerItemInputBlur(event, name) {\r\n        const inputEl = event.target;\r\n        const { value } = inputEl;\r\n        this.slider.updateOptions({ [name]: Number(value) });\r\n    }\r\n    handlerThumbInputBlur(event, index) {\r\n        const inputEl = event.target;\r\n        const { value } = inputEl;\r\n        this.options.values[index] = Number(value);\r\n        this.slider.updateOptions({ values: this.options.values });\r\n    }\r\n    handlerToggleInputClick(event, optionName) {\r\n        const { options } = this;\r\n        this.slider.updateOptions({ [optionName]: !options[optionName] });\r\n    }\r\n    onChangeOptions(newOptions) {\r\n        this.options = newOptions;\r\n        this.updateInputFieldsValues();\r\n    }\r\n    updateInputFieldsValues() {\r\n        const { panelElements } = this;\r\n        const { minInput, maxInput, stepInput, scaleCountsInput, valuesInputs, scaleToggleInput, tooltipToggleInput, progressToggleInput, verticalToggleInput, } = panelElements;\r\n        const entriesOptions = Object.entries(this.options);\r\n        entriesOptions.forEach(([key, value]) => {\r\n            switch (key) {\r\n                case 'min':\r\n                    minInput.value = String(value);\r\n                    break;\r\n                case 'max':\r\n                    maxInput.value = String(value);\r\n                    break;\r\n                case 'step':\r\n                    stepInput.value = String(value);\r\n                    break;\r\n                case 'scaleCounts':\r\n                    scaleCountsInput.value = String(value);\r\n                    break;\r\n                case 'vertical':\r\n                    verticalToggleInput.checked = value;\r\n                    break;\r\n                case 'progress':\r\n                    progressToggleInput.checked = value;\r\n                    break;\r\n                case 'tooltip':\r\n                    tooltipToggleInput.checked = value;\r\n                    break;\r\n                case 'scale':\r\n                    scaleToggleInput.checked = value;\r\n                    break;\r\n                case 'values':\r\n                    value.forEach((currentValue, index) => {\r\n                        valuesInputs[index].value = String(currentValue);\r\n                    });\r\n                    break;\r\n                default:\r\n                    throw new Error(`unexpected options key: ${key}`);\r\n            }\r\n        });\r\n    }\r\n    bindListeners() {\r\n        const { panelElements } = this;\r\n        const { minInput, maxInput, stepInput, scaleCountsInput, valuesInputs, scaleToggleInput, tooltipToggleInput, progressToggleInput, verticalToggleInput, } = panelElements;\r\n        const optionsKeys = Object.keys(this.options);\r\n        optionsKeys.forEach((key) => {\r\n            switch (key) {\r\n                case 'min':\r\n                    minInput.addEventListener('blur', (event) => this.handlerItemInputBlur(event, key));\r\n                    break;\r\n                case 'max':\r\n                    maxInput.addEventListener('blur', (event) => this.handlerItemInputBlur(event, key));\r\n                    break;\r\n                case 'step':\r\n                    stepInput.addEventListener('blur', (event) => this.handlerItemInputBlur(event, key));\r\n                    break;\r\n                case 'scaleCounts':\r\n                    scaleCountsInput.addEventListener('blur', (event) => this.handlerItemInputBlur(event, key));\r\n                    break;\r\n                case 'vertical':\r\n                    verticalToggleInput.addEventListener('click', (event) => this.handlerToggleInputClick(event, key));\r\n                    break;\r\n                case 'progress':\r\n                    progressToggleInput.addEventListener('click', (event) => this.handlerToggleInputClick(event, key));\r\n                    break;\r\n                case 'tooltip':\r\n                    tooltipToggleInput.addEventListener('click', (event) => this.handlerToggleInputClick(event, key));\r\n                    break;\r\n                case 'scale':\r\n                    scaleToggleInput.addEventListener('click', (event) => this.handlerToggleInputClick(event, key));\r\n                    break;\r\n                case 'values': {\r\n                    const values = this.options[key];\r\n                    values.forEach((value, index) => {\r\n                        valuesInputs[index].addEventListener('blur', (event) => this.handlerThumbInputBlur(event, index));\r\n                    });\r\n                    break;\r\n                }\r\n                default:\r\n                    throw new Error(`unexpected options key: ${key}`);\r\n            }\r\n        });\r\n    }\r\n}\r\nexport { Panel };\r\n","import './style.scss';\r\nimport './components/button/button.scss';\r\nimport './components/input-field/input-field.scss';\r\nimport './components/toggle-field/toggle-field.scss';\r\nimport '../index';\r\nimport { Panel } from './Panel/Panel';\r\nconst demoElements = document.querySelectorAll('.demo');\r\nconst customOptionsFirst = {\r\n    tooltip: false,\r\n    progress: false,\r\n    scale: false,\r\n    vertical: false,\r\n};\r\nconst customOptionsSecond = {\r\n    min: -100,\r\n    max: 30,\r\n    step: 10,\r\n    values: [10],\r\n};\r\nconst customOptionsThird = {\r\n    min: -100,\r\n    max: -10,\r\n    step: 0.33,\r\n    vertical: false,\r\n    scaleCounts: 2,\r\n    progress: false,\r\n    values: [-33.01, -55.12],\r\n};\r\nconst customOptionsFourth = {\r\n    min: -1000,\r\n    max: 10000,\r\n    step: 0.33,\r\n    scaleCounts: 5,\r\n    tooltip: false,\r\n    vertical: false,\r\n    scale: true,\r\n    values: [33, 5000, 3000, 6534, 4043],\r\n};\r\nconst customOptionsFive = { values: [1] };\r\nconst optionsArray = [\r\n    customOptionsFirst,\r\n    customOptionsSecond,\r\n    customOptionsThird,\r\n    customOptionsFourth,\r\n    customOptionsFive,\r\n];\r\ndemoElements.forEach((item, index) => {\r\n    const sliderEl = item.querySelector('.slider');\r\n    const panelEl = item.querySelector('.panel');\r\n    const slider = $(sliderEl).rangeSlider(optionsArray[index]);\r\n    // eslint-disable-next-line no-new\r\n    new Panel(panelEl, slider);\r\n});\r\n"],"names":["Presenter","constructor","modelInstance","viewInstance","this","bind","getModelInstance","getViewInstance","subscribe","data","updateOptions","payload","updateValue","getClosestValue","min","max","value","step","range","Math","abs","newValue","round","getPercentOfValue","Observer","observers","getObservers","type","observer","push","notify","forEach","DEFAULT_OPTIONS","scaleCounts","values","vertical","scale","tooltip","progress","Model","options","super","Object","assign","init","getOptions","JSON","parse","stringify","index","newValues","setNewOptions","newOptions","oldOptions","normalizeOptions","normalizeMax","normalizeStep","normalizedOptions","normalizeScaleCounts","normalizeValues","maxScaleCounts","map","sort","a","b","Track","element","isVertical","handleTrackClick","trackElement","document","createElement","render","getElement","toggleVerticalClass","classList","toggle","destroy","remove","add","addEventListener","append","Progress","rootElement","progressEl","updateValues","updateProgressLength","updatePosition","progressLengthInPercent","minValue","maxValue","minValueInPercent","style","height","width","positionInPercent","bottom","left","Scale","rootDom","handleScaleClick","scaleEl","createScalePoint","pointValue","pointEl","innerHTML","String","valuePercent","getScaleValues","partsCountWithoutStart","partStep","i","deleteScalePointsWhenPointOverlap","allPoints","children","item","currentItemRect","getBoundingClientRect","length","nextItem","nextItemRect","top","right","contains","removeChild","scaleValues","scalePoints","scalePoint","Tooltip","tooltipEl","updateInnerText","textContent","Thumb","handleThumbPointerDown","enableTooltip","thumbEl","tooltipInstance","getValue","currentValue","undefined","addActiveClass","removeActiveClass","event","View","domRoot","sliderElement","track","thumbsInstance","progressInstance","scaleInstance","thumbWithMaxValueIndex","lastClickedThumbIndex","getAllInstance","thumbs","toggleActiveThumb","destroyAllInstances","getSliderElement","getCurrentValueFromCoords","clientX","clientY","coords","startEdgeCoords","maxOffsetInPx","offsetHeight","offsetWidth","offsetInPx","_a","_b","_c","_d","thumbInstance","stopPropagation","preventDefault","validateValue","prevThumbValue","nextThumbValue","handlerDocumentPointerMove","validatedValue","handlerDocumentPointerUp","prevValue","floor","ceil","getCurrentValueToStep","removeEventListener","target","ondragstart","closestValue","updateClickedValue","Number","handleIndex","arr","nearestValue","reduce","prev","curr","allIndexOfNearestValue","findNearestIndexToValue","newClickedThumbIndex","findIndex","setActiveClassToThumbWithMaxValue","setActiveClassToCurrentThumb","isRange","Slider","modelOptions","presenterInstance","onChangeOptions","fn","notifyFn","$","rangeSlider","option","get","jQuery","Panel","panelEl","slider","findElements","bindListeners","minInput","querySelector","maxInput","stepInput","scaleCountsInput","thumbsValuesInputs","querySelectorAll","verticalToggleInput","scaleToggleInput","tooltipToggleInput","progressToggleInput","panelElements","valuesInputs","handlerItemInputBlur","name","inputEl","handlerThumbInputBlur","handlerToggleInputClick","optionName","updateInputFieldsValues","entries","key","checked","Error","keys","demoElements","optionsArray","sliderEl"],"sourceRoot":""}